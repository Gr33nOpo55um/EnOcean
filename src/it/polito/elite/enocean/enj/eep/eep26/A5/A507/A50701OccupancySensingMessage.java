/*
 * EnJ - EnOcean Java API
 * 
 * Copyright 2014 Andrea Biasi, Dario Bonino 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
package it.polito.elite.enocean.enj.eep.eep26.A5.A507;

/**
 * A class representing the interpeted payload of a 4BS telegram generated by an
 * occupancy sensor having the A50701 EEP profile.
 * 
 * @author bonino
 *
 */
public class A50701OccupancySensingMessage
{
	// the supply voltage level, if available
	private int supplyVoltage;

	// the supply voltage availability flag
	private boolean supplyVoltageAvailable;

	// the motion detection flag
	private boolean motionDetected;

	// the teach-in flag
	private boolean teachIn;

	// the validity flag
	private boolean valid;

	/**
	 * Class constructor, given the telegram payload parses the content and sets
	 * up the internal fields to reflect the payload content in a more
	 * accessible form.
	 * 
	 * @param data
	 *            the 4BS telegram payload as an array of byte.
	 */
	public A50701OccupancySensingMessage(byte data[])
	{
		// initially not valid
		this.valid = false;

		// check the data lenght, shall be 4
		if (data.length == 4)
		{
			// decode the supply voltage availability flag
			byte supplyVoltageAvailabilityAsByte = (byte) (data[3] & (byte) 0x01);

			// convert the byte value to a boolean
			if (supplyVoltageAvailabilityAsByte > 0)
				this.supplyVoltageAvailable = true;
			else
				this.supplyVoltageAvailable = false;

			// if supply voltage is available, get the voltage value (first data
			// byte)
			byte supplyVoltageAsByte = data[0];

			// convert the value to an integer
			this.supplyVoltage = (int) supplyVoltageAsByte & (int) 0x00ff;

			// decode the pir status
			byte pirStatusAsByte = data[2];

			// convert to a boolean value
			if (pirStatusAsByte >= 0)
				this.motionDetected = false;
			else
				this.motionDetected = true;

			// decode the teach-in flag
			// get the teach-in flag (offset 28, 4th bit of the 4th byte)
			byte teachIn = (byte) ((byte) (data[3] & (byte) 0x08) >> 3);

			// check the corresponding boolean value
			if (teachIn == 0)
				this.teachIn = true;
			else
				this.teachIn = false;

			// everything fine....
			// TODO: check if it is better to check the values of instance
			// variables to assess validity of the message.
			this.valid = true;
		}
	}

	/**
	 * @return the supplyVoltage
	 */
	public int getSupplyVoltage()
	{
		return supplyVoltage;
	}

	/**
	 * @return the supplyVoltageAvailable
	 */
	public boolean isSupplyVoltageAvailable()
	{
		return supplyVoltageAvailable;
	}

	/**
	 * @return the motionDetected
	 */
	public boolean isMotionDetected()
	{
		return motionDetected;
	}

	/**
	 * @return the teachIn
	 */
	public boolean isTeachIn()
	{
		return teachIn;
	}

	/**
	 * @return the valid
	 */
	public boolean isValid()
	{
		return valid;
	}

}
